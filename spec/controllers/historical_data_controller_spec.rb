require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe HistoricalDataController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # HistoricalDatum. As you add validations to HistoricalDatum, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.build(:historical_datum).attributes.symbolize_keys

  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # HistoricalDataController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before do
    @company = FactoryGirl.create(:company)
    @historical_datum = FactoryGirl.create(:historical_datum)
    @company.historical_data << @historical_datum
  end

  describe "GET #list" do
    it "assigns all historical_data as @historical_data" do
      get :list, params: {:format => :json, :controller => :historical_data, :company_id => @company.id}, session: valid_session
      body =  JSON.parse(response.body)
      expect(body['total']).to eq(1)
      row = body['rows'].first
      expect(row['trade_date']).to eq(@historical_datum.trade_date.strftime('%Y-%m-%d'))
      expect(row['open']).to eq(@historical_datum.open.to_s)
      expect(row['high']).to eq(@historical_datum.high.to_s)
      expect(row['low']).to eq(@historical_datum.low.to_s)
      expect(row['close']).to eq(@historical_datum.close.to_s)
      expect(row['volume']).to eq(@historical_datum.volume)
      expect(row['adjusted_close']).to eq(@historical_datum.adjusted_close.to_s)
    end
  end

  describe "GET #prices" do
    it "assigns the requested historical_datum as @historical_datum" do
      get :prices, params: {:format => :json, :controller => :historical_data, :company_id => @company.id}, session: valid_session
      body =  JSON.parse(response.body)
      result = body.first
      expect(result[0]).to eq(@historical_datum.trade_date_as_timestamp)
      expect(result[1]).to eq(@historical_datum.adjusted_close.to_f)
    end
  end


end
